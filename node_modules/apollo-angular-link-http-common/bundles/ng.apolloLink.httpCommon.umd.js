(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs')) :
    typeof define === 'function' && define.amd ? define('apollo-angular-link-http-common', ['exports', 'rxjs'], factory) :
    (global = global || self, factory(global['ng.apolloLink.httpCommon'] = {}, global.rxjs));
}(this, function (exports, rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var fetch = function (req, httpClient, extractFiles) {
        var shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
        var shouldStringify = function (param) {
            return ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
        };
        var isBatching = req.body.length;
        var shouldUseMultipart = req.options && req.options.useMultipart;
        var multipartInfo;
        if (shouldUseMultipart) {
            if (isBatching) {
                return new rxjs.Observable(function (observer) {
                    return observer.error(new Error('File upload is not available when combined with Batching'));
                });
            }
            if (!shouldUseBody) {
                return new rxjs.Observable(function (observer) {
                    return observer.error(new Error('File upload is not available when GET is used'));
                });
            }
            multipartInfo = extractFiles(req.body);
            shouldUseMultipart = !!multipartInfo.files.size;
        }
        // `body` for some, `params` for others
        var bodyOrParams = {};
        if (isBatching) {
            if (!shouldUseBody) {
                return new rxjs.Observable(function (observer) {
                    return observer.error(new Error('Batching is not available for GET requests'));
                });
            }
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            var body = shouldUseMultipart ? multipartInfo.clone : req.body;
            if (shouldUseBody) {
                bodyOrParams = {
                    body: body,
                };
            }
            else {
                var params = Object.keys(req.body).reduce(function (obj, param) {
                    var value = req.body[param];
                    obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;
                    return obj;
                }, {});
                bodyOrParams = { params: params };
            }
        }
        if (shouldUseMultipart && shouldUseBody) {
            var form_1 = new FormData();
            form_1.append('operations', JSON.stringify(bodyOrParams.body));
            var map_1 = {};
            var files = multipartInfo.files;
            var i_1 = 0;
            files.forEach(function (paths) {
                map_1[++i_1] = paths;
            });
            form_1.append('map', JSON.stringify(map_1));
            i_1 = 0;
            files.forEach(function (_, file) {
                form_1.append(++i_1 + '', file, file.name);
            });
            bodyOrParams.body = form_1;
        }
        // create a request
        return httpClient.request(req.method, req.url, __assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
    };
    var mergeHeaders = function (source, destination) {
        if (source && destination) {
            var merged = destination
                .keys()
                .reduce(function (headers, name) { return headers.set(name, destination.getAll(name)); }, source);
            return merged;
        }
        return destination || source;
    };
    function prioritize() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var picked = values.find(function (val) { return typeof val !== 'undefined'; });
        if (typeof picked === 'undefined') {
            return values[values.length - 1];
        }
        return picked;
    }

    exports.fetch = fetch;
    exports.mergeHeaders = mergeHeaders;
    exports.prioritize = prioritize;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng.apolloLink.httpCommon.umd.js.map
